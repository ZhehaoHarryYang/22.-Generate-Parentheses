# derived from NeetCode's idea, use open and close amount of paranthesis to recursively check for the possibilities

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res = []
        def dfs(openN, closeN, cur):
            if closeN == n:
                res.append(cur)
                return
            if openN < n:
                dfs(openN + 1, closeN, cur + "(")
            if closeN < openN:
                dfs(openN, closeN + 1, cur + ")")
        
        dfs(0, 0, "")
        return res
